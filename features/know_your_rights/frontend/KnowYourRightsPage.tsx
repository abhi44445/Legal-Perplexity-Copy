/**
 * Know Your Rights Page Component
 * 
 * Main page for the Know Your Rights feature that allows users to describe
 * situations and get constitutional rights guidance.
 */

import React, { useState } from 'react'
import { motion } from 'framer-motion'
import { 
  Send, 
  ArrowLeft, 
  Shield, 
  AlertTriangle,
  CheckCircle,
  Copy,
  Download,
  Phone,
  ExternalLink,
  HelpCircle
} from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { useKnowYourRights } from './useKnowYourRights'
import {
  type ScenarioType,
  type KnowYourRightsResponse,
  SCENARIO_CONFIGS,
  ACTION_CONFIGS,
  URGENCY_CONFIGS
} from './types'

interface FormData {
  scenario: ScenarioType
  text: string
}

const KnowYourRightsPage: React.FC = () => {
  const [formData, setFormData] = useState<FormData>({
    scenario: 'other',
    text: ''
  })
  const [result, setResult] = useState<KnowYourRightsResponse | null>(null)
  const [showCopiedFeedback, setShowCopiedFeedback] = useState(false)

  const { isLoading, error, queryRights, clearError, reset } = useKnowYourRights()

  const handleSubmit = async () => {
    if (!formData.text.trim()) return

    clearError()

    try {
      const response = await queryRights({
        scenario: formData.scenario,
        text: formData.text,
        language: 'en'
      })
      setResult(response)
    } catch (err) {
      console.error('Query failed:', err)
      // Error is already handled by the hook
    }
  }

  const handleReset = () => {
    setFormData({ scenario: 'other', text: '' })
    setResult(null)
    reset()
  }

  const handleCopyAdvice = async () => {
    if (result?.legal_advice) {
      try {
        await navigator.clipboard.writeText(result.legal_advice)
        setShowCopiedFeedback(true)
        setTimeout(() => setShowCopiedFeedback(false), 2000)
      } catch (err) {
        console.error('Failed to copy text:', err)
      }
    }
  }

  const handleDownloadEvidence = () => {
    if (!result) return

    const evidenceChecklist = `
EVIDENCE COLLECTION CHECKLIST
=============================

Situation: ${SCENARIO_CONFIGS.find(s => s.id === formData.scenario)?.label}
Date of Incident: ________________
Time of Incident: ________________

IMPORTANT EVIDENCE TO COLLECT:

□ Written Records
  - Screenshots (if online)
  - Text messages or emails
  - Official documents or notices
  - Receipts or transaction records

□ Visual Evidence  
  - Photos of any damage or evidence
  - Video recordings (if safe to do so)
  - Screenshots of online harassment

□ Witness Information
  - Names and contact details of witnesses
  - Written statements from witnesses
  - CCTV footage (if available)

□ Personal Documentation
  - Medical records (if injured)
  - Police complaint copy
  - Any correspondence with authorities

□ Timeline Documentation
  - Detailed sequence of events
  - Dates and times of incidents
  - Any pattern of behavior

IMMEDIATE ACTIONS RECOMMENDED:
${result.recommended_actions.map(action => {
  const config = ACTION_CONFIGS.find(a => a.id === action)
  return `□ ${config?.label}: ${config?.description}`
}).join('\n')}

LEGAL DISCLAIMER:
${result.disclaimer}

Generated by Know Your Rights - Legal Perplexity
Date: ${new Date().toLocaleDateString()}
`

    const blob = new Blob([evidenceChecklist], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `evidence-checklist-${formData.scenario}-${new Date().toISOString().split('T')[0]}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const selectedScenario = SCENARIO_CONFIGS.find(s => s.id === formData.scenario)
  const urgencyConfig = result ? URGENCY_CONFIGS.find(u => u.level === result.urgency) : null

  return (
    <div className="min-h-screen bg-neo-white">
      {/* Header */}
      <motion.div 
        className="border-b-4 border-neo-black bg-neo-white"
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.3 }}
      >
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <Button variant="ghost" className="p-2" onClick={() => window.history.back()}>
                <ArrowLeft className="h-6 w-6" />
              </Button>
              <div className="flex items-center gap-3">
                <div className="p-2 bg-neo-black">
                  <Shield className="h-6 w-6 text-neo-white" />
                </div>
                <div>
                  <h1 className="text-2xl font-bold text-neo-black font-inter">Know Your Rights</h1>
                  <p className="text-neo-gray-500 font-inter">Get constitutional guidance for your situation</p>
                </div>
              </div>
            </div>
            {result && (
              <Button variant="outline" onClick={handleReset}>
                New Query
              </Button>
            )}
          </div>
        </div>
      </motion.div>

      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {!result ? (
          /* Input Form */
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="space-y-8"
          >
            {/* Welcome Section */}
            <div className="text-center py-8">
              <div className="text-6xl mb-6">⚖️</div>
              <h2 className="text-3xl font-bold text-neo-black mb-4 font-inter">
                Understand Your Constitutional Rights
              </h2>
              <p className="text-lg text-neo-gray-500 mb-8 max-w-2xl mx-auto font-inter">
                Describe your situation and get guidance based on Indian constitutional law and fundamental rights.
              </p>
            </div>

            {/* Scenario Selection */}
            <Card>
              <CardHeader>
                <CardTitle className="font-inter">What type of situation are you facing?</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {SCENARIO_CONFIGS.map((scenario) => (
                    <motion.button
                      key={scenario.id}
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      onClick={() => setFormData(prev => ({ ...prev, scenario: scenario.id }))}
                      className={`p-4 border-2 rounded-lg text-left transition-all ${
                        formData.scenario === scenario.id
                          ? 'border-neo-black bg-neo-black text-neo-white'
                          : 'border-neo-gray-200 hover:border-neo-gray-400'
                      }`}
                      data-scenario={scenario.id}
                    >
                      <div className="text-2xl mb-2">{scenario.icon}</div>
                      <h3 className="font-bold mb-1 font-inter">{scenario.label}</h3>
                      <p className={`text-sm ${
                        formData.scenario === scenario.id ? 'text-neo-gray-200' : 'text-neo-gray-600'
                      }`}>
                        {scenario.description}
                      </p>
                    </motion.button>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Text Input */}
            <Card>
              <CardHeader>
                <CardTitle className="font-inter">Describe your situation</CardTitle>
                <p className="text-sm text-neo-gray-600">
                  Provide as much detail as possible about what happened, when, and where.
                </p>
              </CardHeader>
              <CardContent>
                <textarea
                  value={formData.text}
                  onChange={(e) => setFormData(prev => ({ ...prev, text: e.target.value }))}
                  placeholder={selectedScenario?.placeholder || "Describe your situation..."}
                  className="w-full h-32 p-4 border-2 border-neo-gray-200 rounded-lg focus:border-neo-black focus:outline-none resize-none font-inter"
                  maxLength={2000}
                />
                <div className="flex justify-between items-center mt-2">
                  <span className="text-sm text-neo-gray-500">
                    {formData.text.length}/2000 characters
                  </span>
                  <div className="text-sm text-neo-gray-500">
                    Examples: {selectedScenario?.examples.join(' • ')}
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Submit Button */}
            <div className="flex justify-center">
              <Button
                onClick={handleSubmit}
                disabled={isLoading || !formData.text.trim() || formData.text.trim().length < 10}
                className="px-8 py-3 text-lg"
                size="lg"
              >
                {isLoading ? (
                  <>
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2" />
                    Analyzing Rights...
                  </>
                ) : (
                  <>
                    <Send className="h-5 w-5 mr-2" />
                    Get Rights Guidance
                  </>
                )}
              </Button>
            </div>

            {/* Error Display */}
            {error && (
              <motion.div
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                className="bg-red-50 border-2 border-red-200 rounded-lg p-4"
              >
                <div className="flex items-center gap-2 text-red-700">
                  <AlertTriangle className="h-5 w-5" />
                  <span className="font-bold">Error</span>
                </div>
                <p className="text-red-600 mt-1">{error.message}</p>
              </motion.div>
            )}

            {/* Loading State */}
            {isLoading && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="bg-neo-gray-50 border-2 border-neo-gray-200 rounded-lg p-6 text-center"
              >
                <div className="flex items-center justify-center gap-2 text-neo-gray-600 mb-2">
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-neo-gray-600" />
                  <span className="font-inter">Analyzing your situation with constitutional law...</span>
                </div>
                <p className="text-sm text-neo-gray-500">This may take up to 2 minutes</p>
              </motion.div>
            )}
          </motion.div>
        ) : (
          /* Results Display */
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="space-y-6"
          >
            {/* Urgency Banner */}
            {urgencyConfig && (
              <motion.div
                initial={{ opacity: 0, scale: 0.95 }}
                animate={{ opacity: 1, scale: 1 }}
                className={`${urgencyConfig.bgColor} border-2 border-current rounded-lg p-4`}
                data-testid="urgency-banner"
              >
                <div className={`flex items-center gap-2 ${urgencyConfig.color}`}>
                  <span className="text-xl">{urgencyConfig.icon}</span>
                  <span className="font-bold font-inter">{urgencyConfig.label}</span>
                </div>
                <p className={`${urgencyConfig.color} text-sm mt-1`}>
                  {urgencyConfig.description}
                </p>
              </motion.div>
            )}

            {/* Legal Advice */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2 font-inter">
                  <Shield className="h-5 w-5" />
                  Your Constitutional Rights & Legal Guidance
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="prose prose-lg max-w-none">
                  <div className="whitespace-pre-wrap font-inter text-neo-black leading-relaxed" data-testid="legal-advice">
                    {result.legal_advice}
                  </div>
                </div>
                
                {/* Action Buttons */}
                <div className="flex gap-2 mt-6">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={handleCopyAdvice}
                    className="flex items-center gap-2"
                  >
                    <Copy className="h-4 w-4" />
                    {showCopiedFeedback ? 'Copied!' : 'Copy Advice'}
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={handleDownloadEvidence}
                    className="flex items-center gap-2"
                  >
                    <Download className="h-4 w-4" />
                    Evidence Checklist
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Citations */}
            {result.citations.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle className="font-inter">Legal Citations & References</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3" data-testid="citations">
                    {result.citations.map((citation, index) => (
                      <div
                        key={index}
                        className="flex items-center gap-3 p-3 bg-neo-gray-50 border border-neo-gray-200 rounded-lg citation"
                      >
                        <div className="text-xs px-2 py-1 bg-neo-black text-neo-white rounded font-bold uppercase">
                          {citation.type}
                        </div>
                        <span className="font-inter text-sm">{citation.reference}</span>
                        {citation.link && (
                          <ExternalLink className="h-4 w-4 text-neo-gray-400" />
                        )}
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Recommended Actions */}
            {result.recommended_actions.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle className="font-inter">Recommended Actions</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3" data-testid="recommended-actions">
                    {result.recommended_actions.map((action, index) => {
                      const actionConfig = ACTION_CONFIGS.find(a => a.id === action)
                      if (!actionConfig) return null

                      const isEmergency = actionConfig.type === 'emergency'
                      const isPrimary = actionConfig.type === 'primary'

                      return (
                        <motion.div
                          key={action}
                          initial={{ opacity: 0, x: -20 }}
                          animate={{ opacity: 1, x: 0 }}
                          transition={{ delay: index * 0.1 }}
                          className={`flex items-center gap-4 p-4 rounded-lg border-2 action-item ${
                            isEmergency 
                              ? 'border-red-200 bg-red-50' 
                              : isPrimary 
                                ? 'border-orange-200 bg-orange-50' 
                                : 'border-neo-gray-200 bg-neo-gray-50'
                          }`}
                        >
                          <div className="text-2xl">{actionConfig.icon}</div>
                          <div className="flex-1">
                            <h4 className="font-bold font-inter">{actionConfig.label}</h4>
                            <p className="text-sm text-neo-gray-600">{actionConfig.description}</p>
                          </div>
                          {action === 'call_police' && (
                            <Button
                              variant={isEmergency ? "default" : "outline"}
                              size="sm"
                              className="flex items-center gap-2"
                              onClick={() => window.open('tel:100')}
                            >
                              <Phone className="h-4 w-4" />
                              Call 100
                            </Button>
                          )}
                        </motion.div>
                      )
                    })}
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Follow-up Questions */}
            {result.follow_up_questions.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2 font-inter">
                    <HelpCircle className="h-5 w-5" />
                    Additional Questions to Consider
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2" data-testid="follow-up-questions">
                    {result.follow_up_questions.map((question, index) => (
                      <div key={index} className="flex items-start gap-2 p-2">
                        <CheckCircle className="h-4 w-4 text-neo-gray-400 mt-1 flex-shrink-0" />
                        <span className="font-inter text-sm">{question}</span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Disclaimer */}
            <Card className="border-orange-200 bg-orange-50">
              <CardContent className="pt-6">
                <div className="flex items-start gap-3" data-testid="disclaimer">
                  <AlertTriangle className="h-5 w-5 text-orange-600 mt-0.5" />
                  <div>
                    <h4 className="font-bold text-orange-800 font-inter">Important Disclaimer</h4>
                    <p className="text-orange-700 text-sm mt-1 font-inter">{result.disclaimer}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        )}
      </div>
    </div>
  )
}

export default KnowYourRightsPage